/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2020-04-29 01:21:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class flat_005fmap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"utf-8\" />\r\n");
      out.write("    <meta\r\n");
      out.write("      name=\"viewport\"\r\n");
      out.write("      content=\"initial-scale=1,maximum-scale=1,user-scalable=no\"\r\n");
      out.write("    />\r\n");
      out.write("    <!--\r\n");
      out.write("  ArcGIS API for JavaScript, https://js.arcgis.com\r\n");
      out.write("  For more information about the layers-geojson sample, read the original sample description at developers.arcgis.com.\r\n");
      out.write("  https://developers.arcgis.com/javascript/latest/sample-code/layers-geojson/index.html\r\n");
      out.write("  -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://192.168.141.10:8080/ArcGis-4.15/arcgis_js_api/library/4.15/esri/themes/light/main.css\">  \r\n");
      out.write("<script src=\"http://192.168.141.10:8080/ArcGis-4.15/arcgis_js_api/library/4.15/init.js\"></script>\r\n");
      out.write("<title>Flat Map</title>\r\n");
      out.write("\r\n");
      out.write("    <style>\r\n");
      out.write("      html,\r\n");
      out.write("      body,\r\n");
      out.write("      #viewDiv {\r\n");
      out.write("        padding: 0;\r\n");
      out.write("        margin: 0;\r\n");
      out.write("        height: 100%;\r\n");
      out.write("        width: 100%;\r\n");
      out.write("      }\r\n");
      out.write("    </style>\r\n");
      out.write("    \r\n");
      out.write("    <script src=\"js/jquery-2.1.1.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("      //定义全局变量\r\n");
      out.write("      var url;\r\n");
      out.write("     \r\n");
      out.write("      require([\r\n");
      out.write("        \"esri/Map\",\r\n");
      out.write("        \"esri/layers/GeoJSONLayer\",\r\n");
      out.write("        \"esri/views/MapView\",\r\n");
      out.write("        \"esri/geometry/Point\",\r\n");
      out.write("        \"esri/widgets/Zoom\",\r\n");
      out.write("        \"esri/PopupTemplate\"\r\n");
      out.write("      ], function(Map, GeoJSONLayer, MapView, Point, Zoom, PopupTemplate) {\r\n");
      out.write("        url = \"http://localhost:8080/map/threed\";\r\n");
      out.write("\r\n");
      out.write("        const template = {\r\n");
      out.write("          title: \"全球工控态势\",\r\n");
      out.write("          content: \"<h1>{name}: {value}</h1>\",\r\n");
      out.write("          fieldInfos: [\r\n");
      out.write("            {\r\n");
      out.write("              fieldName: \"time\",\r\n");
      out.write("              format: {\r\n");
      out.write("                dateFormat: \"short-date-short-time\"\r\n");
      out.write("              }\r\n");
      out.write("            }\r\n");
      out.write("          ]\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        const renderer = {\r\n");
      out.write("          type: \"simple\",\r\n");
      out.write("          field: \"ipnum\",\r\n");
      out.write("          symbol: {\r\n");
      out.write("            type: \"simple-marker\",\r\n");
      out.write("            color: \"orange\",\r\n");
      out.write("            outline: {\r\n");
      out.write("              color: \"white\"\r\n");
      out.write("            }\r\n");
      out.write("          },\r\n");
      out.write("          visualVariables: [\r\n");
      out.write("            {\r\n");
      out.write("              type: \"size\",\r\n");
      out.write("              field: \"ipnum\",\r\n");
      out.write("              stops: [\r\n");
      out.write("                {\r\n");
      out.write("                  value: 2.5,\r\n");
      out.write("                  size: \"4px\"\r\n");
      out.write("                },\r\n");
      out.write("                {\r\n");
      out.write("                  value: 8,\r\n");
      out.write("                  size: \"40px\"\r\n");
      out.write("                }\r\n");
      out.write("              ]\r\n");
      out.write("            }\r\n");
      out.write("          ]\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        var geojsonLayer = new GeoJSONLayer({\r\n");
      out.write("          url: url,\r\n");
      out.write("          copyright: \"Dyting\",\r\n");
      out.write("          popupTemplate: template,\r\n");
      out.write("          renderer: renderer //optional\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        const map = new Map({\r\n");
      out.write("          basemap: \"streets\",\r\n");
      out.write("          layers: [geojsonLayer]\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        const view = new MapView({\r\n");
      out.write("          container: \"viewDiv\",\r\n");
      out.write("          center: [-168, 46],\r\n");
      out.write("          zoom: 3,\r\n");
      out.write("          map: map\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("       \r\n");
      out.write("        view.on(\"click\", function(evt) {\r\n");
      out.write("        \tview.hitTest(evt).then(function (response) {\r\n");
      out.write("        \t\tconsole.log(response);\r\n");
      out.write("                var result = response.results[0];\r\n");
      out.write("                if (result && result.graphic) {\r\n");
      out.write("                \t//获取当前点击处的经纬度并取整数部分\r\n");
      out.write("                \tvar lat = parseInt(result.graphic.geometry.latitude);\r\n");
      out.write("                \tvar lon = parseInt(result.graphic.geometry.longitude);\r\n");
      out.write("                \t\r\n");
      out.write("                    console.log(\"你点了我: [\"+lat+\",\"+lon+\"]\"+typeof(lat));\r\n");
      out.write("    \r\n");
      out.write("                    var countryUrl = \"http://localhost:8080/map/threed?latitude=\"+lat+\"&longitude=\"+lon+\"\";\r\n");
      out.write("                    \r\n");
      out.write("                    //放大点击部分\r\n");
      out.write("                    var zoom = new Zoom({\r\n");
      out.write("                    \tview: view\r\n");
      out.write("                    });\r\n");
      out.write("                    zoom.zoomIn();\r\n");
      out.write("                    \r\n");
      out.write("                    console.log(countryUrl);\r\n");
      out.write("           \r\n");
      out.write("                    var countryLayer = new GeoJSONLayer({\r\n");
      out.write("                        url: countryUrl,\r\n");
      out.write("                        copyright: \"Dyting\",\r\n");
      out.write("                        popupTemplate: template,\r\n");
      out.write("                        renderer: renderer //optional\r\n");
      out.write("                      });\r\n");
      out.write("\r\n");
      out.write("                    map.add(countryLayer);\r\n");
      out.write("                    console.log(\"Layer:\"+map.allLayers.length);\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("      });\r\n");
      out.write("    </script>\r\n");
      out.write("  </head>\r\n");
      out.write("\r\n");
      out.write("  <body>\r\n");
      out.write("    <div id=\"viewDiv\"></div>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
